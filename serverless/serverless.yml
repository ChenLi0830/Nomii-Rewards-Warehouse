# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Nomii-Rewards-Warehouse

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# you can define service wide environment variables here
#environment:
#  stagingStreamUsers: arn:aws:dynamodb:us-west-2:504961736261:table/Nomii-Rewards-Users/stream/2017-04-04T21:13:05.675

custom:
  defaultStage: staging

  stagingStreamUsers: arn:aws:dynamodb:us-west-2:504961736261:table/Nomii-Rewards-Users/stream/2017-04-04T21:13:05.675
  stagingStreamStampEvents: arn:aws:dynamodb:us-west-2:504961736261:table/Nomii-Rewards-Stamp-Events/stream/2017-04-05T21:26:56.740
  stagingStreamRestaurants: arn:aws:dynamodb:us-west-2:504961736261:table/Nomii-Rewards-Restaurants/stream/2017-04-05T21:27:37.426
  stagingStreamCoupons: arn:aws:dynamodb:us-west-2:504961736261:table/Nomii-Rewards-Coupons/stream/2017-04-05T21:28:04.464

  userStreamARN: ${self:custom.${opt:stage, self:custom.defaultStage}StreamUsers}
  stampEventStreamARN: ${self:custom.${opt:stage, self:custom.defaultStage}StreamStampEvents}
  restaurantStreamARN: ${self:custom.${opt:stage, self:custom.defaultStage}StreamRestaurants}
  couponStreamARN: ${self:custom.${opt:stage, self:custom.defaultStage}StreamCoupons}

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:provider.stage}Profile
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  user:
    handler: handlers.user
    events:
      - stream: ${self:custom.userStreamARN}
  stampEvent:
    handler: handlers.stampEvent
    events:
      - stream: ${self:custom.stampEventStreamARN}
  restaurant:
    handler: handlers.restaurant
    events:
      - stream: ${self:custom.restaurantStreamARN}
  coupon:
    handler: handlers.coupon
    events:
      - stream: ${self:custom.couponStreamARN}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
